// Generated by CoffeeScript 2.7.0
var after, before, directConvert, directXML, dom, doubleConvert, doubleXML, i, j, justParse, k, l, len, m, name, nothingConvert, parser, ref, ref1, ref2, ref3, ref4, renderer, reps, stringify, vdom, xml, xmldomDOMParser;

import {
  RenderToXMLDom,
  RenderToJSDom
} from './index.js';

import {
  h,
  Fragment
} from 'preact';

import {
  renderToString
} from 'preact-render-to-string';

import xmldom from '@xmldom/xmldom';

import jsdom from 'jsdom';

xmldomDOMParser = new xmldom.DOMParser();

ref = [
  {
    name: 'xmldom',
    renderer: new RenderToXMLDom({
      xmldom,
      skipNS: true
    }),
    parser: function(text) {
      return xmldomDOMParser.parseFromString(text,
  'image/svg+xml');
    },
    stringify: function(dom) {
      return new xmldom.XMLSerializer().serializeToString(dom);
    },
    reps: 100000
  },
  {
    name: 'jsdom',
    renderer: new RenderToJSDom({jsdom}),
    parser: function(text) {
      return new jsdom.JSDOM("<!DOCTYPE html>" + text).window.document.body.children[0];
    },
    stringify: function(dom) {
      return dom.outerHTML;
    },
    reps: 1000
  }
];
  //reps: 1000000
for (i = 0, len = ref.length; i < len; i++) {
  ({name, renderer, parser, stringify, reps} = ref[i]);
  console.log();
  console.log('***', name);
  vdom = h('svg', {
    viewBox: "0 0 200 200",
    xmlns: 'http://www.w3.org/2000/svg'
  }, [
    h('g',
    {
      id: 'g1'
    },
    [
      h('rect',
      {
        id: 'rect1',
        x: 0,
        y: 0,
        width: 100,
        height: 100,
        fill: 'red'
      }),
      h('text',
      {
        y: 100,
        style: 'font-size: 50px'
      },
      'Hi'),
      h(Fragment)
    ],
    h('use',
    {
      "xlink:href": "#g1",
      x: 100,
      y: 100
    }))
  ]);
  //# For testing innerHTML:
  //h 'desc', {dangerouslySetInnerHTML: {__html:
  //  'Made with <a href="https://github.com/edemaine/preact-render-to-dom">preact-render-to-dom</a>'}}
  before = performance.now();
  for (j = 0, ref1 = reps; (0 <= ref1 ? j < ref1 : j > ref1); 0 <= ref1 ? j++ : j--) {
    dom = null;
  }
  after = performance.now();
  nothingConvert = after - before;
  console.log(`Null conversion: ${nothingConvert / reps * 1000}us`);
  before = performance.now();
  for (k = 0, ref2 = reps; (0 <= ref2 ? k < ref2 : k > ref2); 0 <= ref2 ? k++ : k--) {
    dom = renderer.render(vdom);
  }
  after = performance.now();
  directConvert = after - before;
  directXML = stringify(dom);
  console.log(`Direct conversion: ${(directConvert - nothingConvert) / reps * 1000}us`);
  before = performance.now();
  for (l = 0, ref3 = reps; (0 <= ref3 ? l < ref3 : l > ref3); 0 <= ref3 ? l++ : l--) {
    xml = renderToString(vdom);
    dom = parser(xml);
  }
  after = performance.now();
  doubleConvert = after - before;
  doubleXML = stringify(dom);
  console.log(`Double conversion: ${(doubleConvert - nothingConvert) / reps * 1000}us`);
  console.log("Speedup:", doubleConvert / directConvert);
  xml = renderToString(vdom);
  before = performance.now();
  for (m = 0, ref4 = reps; (0 <= ref4 ? m < ref4 : m > ref4); 0 <= ref4 ? m++ : m--) {
    dom = parser(xml);
  }
  after = performance.now();
  justParse = after - before;
  console.log(`Just parsing: ${(justParse - nothingConvert) / reps * 1000}us`);
  console.log("Speedup:", justParse / directConvert);
  console.log();
  console.log(directXML);
  if (directXML !== doubleXML) {
    console.log('>>> DIFFERENT OUTPUT FROM DOUBLE CONVERSION:');
    //console.log dom
    console.log(doubleXML);
  }
}
